package easypbgen

import "fmt"

var Templates = map[string]string{
	"transportHeading": `package transport
// Generated by github.com/balduser/easypbgen

import (
	"context"
	// pb
	// model
)

`,
	"templateG": `func (g grpcTransport) %s(ctx context.Context, request *pb.%sRequest) (*pb.%sResponse, error) {
	_, response, err := g.%s.ServeGRPC(ctx, request)
	if err != nil {
		g.log.Error().Err(err).Msg("%s transport error")
		return nil, err
	}
	resp := response.(*pb.%sResponse)
	return resp, nil
}

`,
	"templateDec": `func decode%s(ctx context.Context, grpcRequest interface{}) (interface{}, error) {
	req := grpcRequest.(*pb.%sRequest)
	result := &model.%sRequest{
%s	}
	return result, nil
}

`,
	"templateEnc": `func encode%s(ctx context.Context, grpcResponse interface{}) (interface{}, error) {
	resp := grpcResponse.(*model.%sResponse)
	response := &pb.%sResponse{
%s	}
	return response, nil
}

`,
	"encFieldTypeTemplate": `		%s: resp.%s,
`,
	"modelHeading": `package model
//Generated by github.com/balduser/easypbgen

`,
	"modelTemplate": `type %s struct {
%s
}

`,
}

func loadTemplates(parsed *Parsed) {
	fmt.Println(parsed.Config)
	for templateName, _ := range Templates {
		loadTemplate(templateName, parsed)
	}
}

func loadTemplate(templateName string, parsed *Parsed) {
	if value, ok := parsed.Config[templateName]; ok {
		Templates[templateName] = value
	}
}
